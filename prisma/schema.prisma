// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") 
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String       @default(cuid()) @id
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  createdBy     String?      @map(name: "created_by")
  updatedBy     String?      @map(name: "updated_by")
  name          String?
  email         String?   @unique
  password      String?
  budgets        BudgetUser[]
  
  @@map(name: "users")
}

model BudgetUser {
  budgetId      String
  userId        String
  user          User         @relation(fields: [userId], references: [id])
  budget        Budget       @relation(fields: [budgetId], references: [id])
  
  @@id([budgetId, userId])
  @@map("budget_users")
}
model Budget {
  id         String       @default(cuid()) @id
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  createdBy     String?      @map(name: "created_by")
  updatedBy     String?      @map(name: "updated_by")
  users         BudgetUser[]
  pillars       Pillar[]
  categoryId   String
  category     Category   @relation(fields: [categoryId], references: [id])

  @@map(name: "budgets")

}

model Category {
  id         String       @default(cuid()) @id
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  createdBy     String?      @map(name: "created_by")
  updatedBy     String?      @map(name: "updated_by")
  name         String?
  description  String?
  budgets      Budget[]
  
  @@map(name: "categories")
}

model Pillar {
  id         String       @default(cuid()) @id
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  createdBy     String?      @map(name: "created_by")
  updatedBy     String?      @map(name: "updated_by")
  name         String?
  budgetId     String
  budget       Budget     @relation(fields: [budgetId], references: [id])
  expenses     Expense[]
  incomes      Income[]
  
  @@map(name: "pillars")

}

model Expense {
  id         String       @default(cuid()) @id
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  createdBy     String?      @map(name: "created_by")
  updatedBy     String?      @map(name: "updated_by")
  date         DateTime?  @default(now())
  source         String?
  amount        Decimal?
  paymentType    PaymentType
  installmentNumber   Int?      @default(1)
  totalInstallments   Int?      @default(1)
  paymentMethod  PaymentMethod
  pillarId      String
  pillar        Pillar     @relation(fields: [pillarId], references: [id])

  
  @@map(name: "expenses")
}

model Income {
  id         String       @default(cuid()) @id
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  createdBy     String?      @map(name: "created_by")
  updatedBy     String?      @map(name: "updated_by")
  date         DateTime?  @default(now())
  source         String?
  amount        Decimal?
  paymentType    PaymentType
  installmentNumber     Int?      @default(1)
  totalInstallments     Int?      @default(1)
  paymentMethod   PaymentMethod
  pillarId      String
  pillar        Pillar     @relation(fields: [pillarId], references: [id])
  
  @@map(name: "incomes")
}

enum PaymentType {
  SPOT
  IN_INSTALLMENTS
}

enum PaymentMethod {
  CASH
  DEBIT
  CREDIT
  PIX
  OTHER
}